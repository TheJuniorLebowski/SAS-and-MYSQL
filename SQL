

1)  mysql -uroot -proot      #To get the sql in command line.Here "root". just after p is the password set for mysql
         #Alternatively below code can be used as well 
    mysql -u root -p       #When prompted for password; give root which is the password for mysql. 
    show dabases;  #THis will shows all the databases of the MYSQL.

2)  ps -ef | grep mysqld     #This checks if the server is running. If running output will have "mysqld" listed as well
3)  cd /usr/bin          #If it's not running, we can run it by running both the line of codes in CLI
    ./safe_mysqld &

4)  cd /usr/bin       #We can shut down mysql using this two lines of code. It will ask for password of MySql
./mysqladmin -u root -p shutdown


sudo mysql-workbench    # Open the workbench
mysqladmin --version #Check the version of MySql
 
Connect to the MySQL server using the mysql command-line client with the following command:


############################################################################################################################

1) Select Function  #This fn is used to select data from a db. It is not case sensitive
   A) SELECT LastName,FirstName FROM Persons    #This will selecte LastName & FirstName vars from Persons table
   B) SELECT * FROM Persons     #This will select all the columns from Persons table
   C) SELECT DISTINCT City FROM Persons   #It will select distinct cities from Persons table. Wont show dupilcate values


2) WHERE Function   # This is used for filtering out the data
    A) SELECT * FROM Persons WHERE City='Sandnes'   #It will give out all the rows which has city as "Sandnes" and all columns
    B) SELECT * FROM Persons WHERE Year=1965    #It will shows all the values which has Year as 1965


3) AND & OR operators    # The AND operator displays a record if both the first condition and the second condition are true.
                          #The OR operator displays a record if either the first condition or the second condition is true.

    A) SELECT * FROM Persons WHERE FirstName='Tove' AND LastName='Svendson'   #show values where both conditions r true
    B) SELECT * FROM Persons WHERE FirstName='Tove' OR FirstName='Ola'
    C) SELECT * FROM Persons WHERE LastName='Svendson' AND (FirstName='Tove' OR FirstName='Ola')
      # C will select only the persons with the first name equal to "Tove" or "Ola" AND the last name equal to "Svendson"

4)  ORDER BY    # The ORDER BY keyword is used to sort the result-set
   SELECT column_name(s) FROM table_name ORDER BY column_name(s) ASC|DESC   #General syntax
 
    A) SELECT * FROM Persons ORDER BY LastName DESC    #select all the persons from the table above, however, we want to sort
                                                       # the persons descending (alphabetical letters) by their last name.

5) INSERT INTO    # Used for inserting new records into a table
   #INSERT INTO statement can be written into two forms. The first form doesn't specify the column names where the data will
   # be inserted, only their values. The second form specifies both the column names and the values to be inserted.
      1)  INSERT INTO table_name VALUES (value1, value2, value3,...)
      2)  INSERT INTO table_name (column1, column2, column3,...) VALUES (value1, value2, value3,...)

      A) INSERT INTO Persons VALUES (4,'Nilsen', 'Johan', 'Bakken', 'Stavanger')             #This will add info into 1st 5 columns
      B) INSERT INTO Persons (P_Id, LastName, FirstName) VALUES (5, 'Tjessem', 'Jakob')      #insert data into specified columns

6) UPDATE function.   # It can be used to update/edit an existing row in a table
      A) UPDATE Persons SET Address='Nissestien 67', City='Sandnes' WHERE LastName='Tjessem' AND FirstName='Jakob'
       #IT will update Address & City column in Persons table where Lastname is Tjessam and FIrstName is Jakob
       #If we had not mentioned WHERE arg, it would have updated all the rows in the Address and CIty columns

7)  DELETE function   #Delete rows in a table
     A) DELETE FROM Persons WHERE LastName='Tjessem' AND FirstName='Jakob'  #It will delete all such conditional rows
     B) DELETE * FROM table_name    #It is possible to delete all rows in a table without deleting the table itself

8)  LIKE operator    # It is used in a WHERE clause to search for a specified pattern in a column.
     A) SELECT * FROM Persons WHERE City LIKE 's%'   # select the rows living in a city that starts with "s" from the table
     B) SELECT * FROM Persons WHERE City LIKE '%as'   # Same as above, city ends with "as"
     C) SELECT * FROM Persons WHERE City LIKE '%tav%'  #Same as above, city contains "tav"
     D) SELECT * FROM Persons WHERE City NOT LIKE '%tas%'    #Same as above, city doesnt contain "tas"
     E) SELECT * FROM Persons WHERE City LIKE '[abc]%'   #Same as above, city starts with either a or b or c
     F) SELECT * FROM Persons WHERE City LIKE '[^abc]%'    #Same as above, city doesnt start with either a or b or c

9) IN operator      # The IN operator allows you to specify multiple values in a WHERE clause.
     A) SELECT * FROM Persons WHERE LastName IN ('top','kek') #Select rows which have lasname as top or kek in the table

10) BETWEEN operator    #is used in a WHERE clause to select a range of data between two values. It selects a range of data between
                          two values. The values can be numbers, text, or dates.
        SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2     #General syntax

     A) SELECT * FROM Persons WHERE LastName BETWEEN 'Hansen' AND 'Pettersen'    #It will select persons with a last name alphabetically
                                                      # between "Hansen" and "Pettersen" from the table above.
     B) SELECT * FROM Persons WHERE LastName NOT BETWEEN 'Hansen' AND 'Pettersen'    # NOT BETWEEN to display results outside the range

11) ALIAS     # We can give a table or a column another name by using an alias. This can be a good thing to do if you have very long
              or complex table names or column names.
          SELECT column_name AS alias_name FROM table_name      #General syntax
     
   A) SELECT po.OrderID, p.LastName, p.FirstName FROM Persons AS p, Product_Orders AS po WHERE p.LastName='Hansen' AND p.FirstName='Ola'
     #HEre we've given Persons table as p & Product_Order table as po. we want to list all the orders that "Ola Hansen" is responsible
     for.  Here in B' we do the same without using aliases.
   B) SELECT Product_Orders.OrderID, Persons.LastName, Persons.FirstName FROM Persons, Product_Orders WHERE Persons.LastName='Hansen' 
       AND Persons.FirstName='Ola'
         #Here also, we list all the orders that are from "Ola Hansen" w/o using any aliases

12) JOIN:  The JOIN keyword is used in an SQL statement to query data from two or more tables, based on a relationship between certain
           columns in these tables.
           Tables in a database are often related to each other with keys.
           A primary key is a column (or combination of columns) with a unique value for each row. Each primary key value must be
           unique within the table. The purpose is to bind data together, across tables, w/o repeating all of the data in every table.
           Primary Key: No two rows in a table can have same key. It's the identifier; a unique value like Id or something

    Different SQL Joins:
     --JOIN: Return rows when there is at least one match in both tables. It is same as INNER JOIN
     --LEFT JOIN: Return all rows from the left table, even if there are no matches in the right table
     --RIGHT JOIN: Return all rows from the right table, even if there are no matches in the left table
     --FULL JOIN: Return rows when there is a match in one of the tables

    SELECT column_name(s) FROM table_name1 INNER JOIN table_name2 ON table_name1.column_name=table_name2.column_name   #SYntax

    A) SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo FROM Persons INNER JOIN Orders ON Persons.P_Id=Orders.P_Id
       ORDER BY Persons.LastName       #Inner Join Example
       #Here we take last & 1st name from Persons, Order no. frm Orders table and then do inner join where P_Id from Persons is same
       as P_Id from Orders. Here P_Id is primary key in Persons and foriegn key in the Orders table

    B) SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo FROM Persons LEFT JOIN Orders ON Persons.P_Id=Orders.P_Id
       ORDER BY Persons.LastName      #Left join. It'll include only matching rows from 2nd table and all the rows from 1st table even
                                     if they do not have a match in the 2nd table (Orders table)
   
    C) SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo FROM Persons RIGHT JOIN Orders ON Persons.P_Id=Orders.P_Id
        ORDER BY Persons.LastName             # Right outer join. returns all the rows from the right table (Orders), even if there are
                                              # no matches in the left table (Persons).

    D) SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo FROM Persons FULL JOIN Orders ON Persons.P_Id=Orders.P_Id
       # Full Join. The FULL JOIN keyword returns all the rows from the left table (Persons), and all the rows from the right table
         (Orders). If there are rows in "Persons" that do not have matches in "Orders", or if there are rows in "Orders" that do not
          have matches in "Persons", those rows will be listed as well.


 13) UNION: This operator combines two or more SELECT statements.The UNION operator selects only distinct values by default. To allow
           duplicate values, use UNION ALL operator.
           SELECT column_name(s) FROM table_name1 UNION ALL SELECT column_name(s) FROM table_name2     #General Syntax

      A) SELECT E_Name FROM Employees_Norway UNION SELECT E_Name FROM Employees_USA
         #It will give out all the distint E_name column from both the tables

 14) INSERT INTO: It is used for creating back up copies of files
     insert INTO new_table select * FROM existing table 
 
      A) CREATE TABLE actor_kek LIKE actor;   #Here we create a new empty table actor_kek similar as actor
         INSERT INTO actor_kek select * FROM actor;  #Then we copy value of actor table into the actor_kek
       
      B) INSERT INTO LastName,Firstname INTO actor_kek FROM actor WHERE City='Sandnes' # Using INSERT INTO with WHERE clause




















http://www.ebooktutorials.in/2017/04/sql-tutorialwwww3schoolscom-updated.html

