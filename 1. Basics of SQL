

show tables;             #It will show the tables of current database/schema
Describe actor;      


1) Select Function  #This fn is used to select data from a db. It is not case sensitive
   A) SELECT LastName,FirstName FROM Persons    #This will selecte LastName & FirstName vars from Persons table
   B) SELECT * FROM Persons     #This will select all the columns from Persons table
   C) SELECT DISTINCT City FROM Persons   #It will select distinct cities from Persons table. Wont show dupilcate values
   D) SELECT * FROM Persons LIMIT 10    #This will select all the columns from Persons table but show only 10 rows
   
   E) SELECT COUNT(*) from Persons     # It will count the number of rows in Persons table
   F) SELECT COUNT(City) from Persons  # It will count the number of non-missing values in City
   G) SELECT COUNT(DISTINCT City) FROM Persons;   # Count the non-missing distinct birthdates


2) WHERE Function   # WHERE is used to filter out both text results as well as numbers
    A) SELECT * FROM Persons WHERE City='Sandnes'   #It will give out all the rows which has city as "Sandnes" and all columns
    B) SELECT * FROM Persons WHERE Year=1965    #It will shows all the values which has Year as 1965
    C) SELECT title, release_year FROM films where release_year > 2000;  # Get title & release_year of films after year 2000



3) AND & OR operators    # The AND operator displays a record if both the first condition and the second condition are true.
                          #The OR operator displays a record if either the first condition or the second condition is true.

    A) SELECT * FROM Persons WHERE FirstName='Tove' AND LastName='Svendson'   #show values where both conditions r true
    B) SELECT * FROM Persons WHERE FirstName='Tove' OR FirstName='Ola'
    C) SELECT * FROM Persons WHERE LastName='Svendson' AND (FirstName='Tove' OR FirstName='Ola')
      # C will select only the persons with the first name equal to "Tove" or "Ola" AND the last name equal to "Svendson"
    
    D) SELECT * FROM films WHERE language = 'Spanish' AND release_year > 2000 and release_year < 2010
       # Get all details for Spanish language films released after 2000, but before 2010.
       
    E) SELECT title FROM films WHERE (release_year = 1994 OR release_year = 1995) AND (certification = 'PG' OR certification = 'R');
       # selects all films that were released in 1994 or 1995 which had a rating of PG or R.


4) IN operator      # The IN operator allows you to specify multiple values in a WHERE clause.
     A) SELECT * FROM Persons WHERE LastName IN ('top','kek') #Select rows which have lasname as top or kek in the table
     B) SELECT title, release_year FROM films WHERE release_year IN (1990, 2000) AND duration > 120
        # Get the title and release year of all films released in 1990 or 2000 that were longer than two hours.
     c) SELECT title, language FROM films WHERE language in ('English', 'Spanish', 'French') # Get title lang that are in either en, fr or sp.


5) BETWEEN operator    #is used in a WHERE clause to select a range of data between two values. It selects a range of data between
                          two values. The values can be numbers, text, or dates.
        SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2     #General syntax

     A) SELECT title, release_year FROM films WHERE release_year BETWEEN 1990 AND 2000 AND budget > 100000000 AND language = 'Spanish'
        # get the title and release year of all Spanish language films released between 1990 and 2000 (inclusive) with budgets over $100 mln.
     B) SELECT * FROM Persons WHERE LastName NOT BETWEEN 'Hansen' AND 'Pettersen'    # NOT BETWEEN to display results outside the range


6) NULL operator    #In SQL, NULL represents a missing or unknown value. You can check for NULL values using the expression IS NULL.
        # We can filter out missing values so you only get results which are not NULL using IS NOT NULL
       
     A) SELECT COUNT(*) FROM people WHERE birthdate IS NULL;  # count the number of missing birth dates in the people table:
     B) SELECT name FROM people WHERE birthdate IS NOT NULL;  # names of all ppl whose birth dates are not missing in the people table
     C) SELECT ProductName,UnitPrice*(UnitsInStock+IFNULL(UnitsOnOrder,0)) FROM Products; 
          # Here if UnitsOnOrder has null values, it will be considered as zero


7)  LIKE operator    # It is used in a WHERE clause to search for a specified pattern in a column.
     A) SELECT * FROM Persons WHERE City LIKE 's%'   # select the rows living in a city that starts with "s" from the table
     B) SELECT * FROM Persons WHERE City LIKE '%as'   # Same as above, city ends with "as"
     C) SELECT * FROM Persons WHERE City LIKE '%tav%'  #Same as above, city contains "tav"
     D) SELECT * FROM Persons WHERE City NOT LIKE '%tas%'    #Same as above, city doesnt contain "tas"
     E) SELECT * FROM Persons WHERE City LIKE '[abc]%'   #Same as above, city starts with either a or b or c
     F) SELECT * FROM Persons WHERE City LIKE '[^abc]%'    #Same as above, city doesnt start with either a or b or c
     G) SELECT name FROM people WHERE name LIKE '_r%'  # Get the names of people whose names have 'r' as the second letter.
     H) SELECT name FROM people WHERE name NOT LIKE 'A%' # Get the names of people whose names don't start with A.


8) ALIAS     # We can give a table or a column another name by using an alias. This can be a good thing to do if you have very long
              or complex table names or column names.
          SELECT column_name AS alias_name FROM table_name      #General syntax
     
   A) SELECT title, gross - budget AS net_profit FROM films;   # Get the title and net profit (gross- budget) for all films
   B) SELECT Product_Orders.OrderID, Persons.LastName, Persons.FirstName FROM Persons, Product_Orders WHERE Persons.LastName='Hansen' 
       AND Persons.FirstName='Ola'
         #Here also, we list all the orders that are from "Ola Hansen" w/o using any aliases
   C) SELECT MAX(release_year) - MIN(release_year) AS difference FROM films #No. years b/w the newest film & oldest film aliasd as difference
   D) SELECT (MAX(release_year) - MIN(release_year))/10.0 AS numder_of_decades FROM films   # Get the number of decades the films table
              #covers. Alias the result as number_of_decades


9) SQL Aggregate Functions:  SQL aggregate functions return a single value, calculated from values in a column.
        AVG() - Returns the average value
        COUNT() - Returns the number of rows
        FIRST() - Returns the first value
        LAST() - Returns the last value
        MAX() - Returns the largest value
        MIN() - Returns the smallest value
        SUM() - Returns the sum
        
        SELECT SUM(duration) FROM films; # Total duration of all films
        SELECT SUM(budget) FROM films WHERE release_year >= 2010;;  #  total budget of movies made in the year 2010 or later
        SELECT MAX(release_year) - MIN(release_year) AS difference FROM films #No. years between the newest film & oldest film. aliasd as difference




10)  ORDER BY    # The ORDER BY keyword is used to sort the result-set. By default ORDER BY will sort in ascending order.
   SELECT column_name(s) FROM table_name ORDER BY column_name(s) ASC|DESC   #General syntax
 
    A) SELECT title FROM films ORDER BY release_year DESC;   # titles of films sorted by release year, from newest to oldest.
    B) SELECT title FROM films WHERE release_year in (2000, 2012) ORDER BY release_year    #Get the title of films released
                    # in 2000 or 2012, in the order they were released.
    C) SELECT * FROM films WHERE release_year NOT IN (2015) ORDER BY duration   # Get all details for all films except those
                 # released in 2015 and order them by duration.
    D) SELECT title, gross FROM films WHERE title LIKE 'M%' ORDER BY title     # Get the title and gross earnings for movies
                   # which begin with the letter 'M' and order the results alphabetically.
    E) SELECT birthdate, name FROM people ORDER BY birthdate, name;   # ORDER BY can also be used to sort on multiple columns.
            #It will sort by the first column specified, then sort by the next, then the next, and so on. HERE it sorts on
               #birth dates first (oldest to newest) and then sorts on the names in alphabetical order. 


7) GROUP BY statement: The GROUP BY statement is used in conjunction with the aggregate functions to group the result-set by one or
                   more columns. Note that GROUP BY always goes after the FROM clause. Note also that ORDER BY always goes after GROUP BY

      SELECT column_name, aggregate_function(column_name)       #General Syntax
      FROM table_name
      WHERE column_name operator value
      GROUP BY column_name

   A) SELECT sex, count(*) FROM employees GROUP BY sex;   # count the number of male and female employees in your company.
   B) SELECT release_year, MAX(budget) FROM films GROUP BY release_year; # Get the release year and largest budget for all
             #films, grouped by release year.
   C) SELECT release_year, MIN(gross) FROM films GROUP BY release_year    # Get the release year and lowest gross earnings
                per release year.
   D) SELECT language, sum(gross) FROM films GROUP BY language  # Get the language and total gross amount films in each language made.




11) INSERT INTO    # Used for inserting new records into a table
   #INSERT INTO statement can be written into two forms. The first form doesn't specify the column names where the data will
   # be inserted, only their values. The second form specifies both the column names and the values to be inserted.
      1)  INSERT INTO table_name VALUES (value1, value2, value3,...)
      2)  INSERT INTO table_name (column1, column2, column3,...) VALUES (value1, value2, value3,...)

      A) INSERT INTO Persons VALUES (4,'Nilsen', 'Johan', 'Bakken', 'Stavanger')             #This will add info into 1st 5 columns
      B) INSERT INTO Persons (P_Id, LastName, FirstName) VALUES (5, 'Tjessem', 'Jakob')      #insert data into specified columns



12) UPDATE function.   # It can be used to update/edit an existing row in a table
      A) UPDATE Persons SET Address='Nissestien 67', City='Sandnes' WHERE LastName='Tjessem' AND FirstName='Jakob'
       #IT will update Address & City column in Persons table where Lastname is Tjessam and FIrstName is Jakob
       #If we had not mentioned WHERE arg, it would have updated all the rows in the Address and CIty columns


13)  DELETE function   #Delete rows in a table
     A) DELETE FROM Persons WHERE LastName='Tjessem' AND FirstName='Jakob'  #It will delete all such conditional rows
     B) DELETE * FROM table_name    #It is possible to delete all rows in a table without deleting the table itself






14) JOIN:  The JOIN keyword is used in an SQL statement to query data from two or more tables, based on a relationship between certain
           columns in these tables.
           Tables in a database are often related to each other with keys.
           A primary key is a column (or combination of columns) with a unique value for each row. Each primary key value must be
           unique within the table. The purpose is to bind data together, across tables, w/o repeating all of the data in every table.
           Primary Key: No two rows in a table can have same key. It's the identifier; a unique value like Id or something

    Different SQL Joins:
     --JOIN: Return rows when there is at least one match in both tables. It is same as INNER JOIN
     --LEFT JOIN: Return all rows from the left table, even if there are no matches in the right table
     --RIGHT JOIN: Return all rows from the right table, even if there are no matches in the left table
     --FULL JOIN: Return rows when there is a match in one of the tables

    SELECT column_name(s) FROM table_name1 INNER JOIN table_name2 ON table_name1.column_name=table_name2.column_name   #SYntax

    A) SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo FROM Persons INNER JOIN Orders ON Persons.P_Id=Orders.P_Id
       ORDER BY Persons.LastName       #Inner Join Example
       #Here we take last & 1st name from Persons, Order no. frm Orders table and then do inner join where P_Id from Persons is same
       as P_Id from Orders. Here P_Id is primary key in Persons and foriegn key in the Orders table

    B) SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo FROM Persons LEFT JOIN Orders ON Persons.P_Id=Orders.P_Id
       ORDER BY Persons.LastName      #Left join. It'll include only matching rows from 2nd table and all the rows from 1st table even
                                     if they do not have a match in the 2nd table (Orders table)
   
    C) SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo FROM Persons RIGHT JOIN Orders ON Persons.P_Id=Orders.P_Id
        ORDER BY Persons.LastName             # Right outer join. returns all the rows from the right table (Orders), even if there are
                                              # no matches in the left table (Persons).

    D) SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo FROM Persons FULL JOIN Orders ON Persons.P_Id=Orders.P_Id
       # Full Join. The FULL JOIN keyword returns all the rows from the left table (Persons), and all the rows from the right table
         (Orders). If there are rows in "Persons" that do not have matches in "Orders", or if there are rows in "Orders" that do not
          have matches in "Persons", those rows will be listed as well.



 15) UNION: This operator combines two or more SELECT statements.The UNION operator selects only distinct values by default. To allow
           duplicate values, use UNION ALL operator.
           SELECT column_name(s) FROM table_name1 UNION ALL SELECT column_name(s) FROM table_name2     #General Syntax

      A) SELECT E_Name FROM Employees_Norway UNION SELECT E_Name FROM Employees_USA
         #It will give out all the distint E_name column from both the tables




 16) INSERT INTO: It is used for creating back up copies of files
     insert INTO new_table select * FROM existing table 
 
      A) CREATE TABLE actor_kek LIKE actor;   #Here we create a new empty table actor_kek similar as actor
         INSERT INTO actor_kek select * FROM actor;  #Then we copy value of actor table into the actor_kek
       
      B) INSERT INTO LastName,Firstname INTO actor_kek FROM actor WHERE City='Sandnes' # Using INSERT INTO with WHERE clause








http://www.ebooktutorials.in/2017/04/sql-tutorialwwww3schoolscom-updated.html

