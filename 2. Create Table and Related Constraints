


1) CREATE TABLE Function:   This fn is used for creating a table in a database
      CREATE TABLE table_name      #General syntax for table creation. We need to mention the data type for columns as well
      (
      column_name1 data_type,
      column_name2 data_type,
      column_name3 data_type,
      ....
      )
   
   A)   CREATE TABLE Persons               #This functon will create an empty table PERSONS with 5 columns and their variable type
        (                                  # P_Id is int type and will hold a number; rest of the vars will hold varchar with characer
        P_Id int,                          # length of 255
        LastName varchar(255),              # The empty table can be filled with data with the INSERT INTO statement.
        FirstName varchar(255),
        Address varchar(255),
        City varchar(255)
        )


2)  DROP function: Indexes, tables, and databases can easily be deleted/removed with the DROP statement.
    
     A) DROP TABLE table_name          # Used for deleting a table
     B) DROP DATABASE database_name       #The DROP DATABASE statement is used to delete a database
     C) TRUNCATE TABLE table_name      # if we only want to delete the data inside the table, and not the table itself, then TRUNCATE


3)  ALTER TABLE function: The ALTER TABLE statement is used to add, delete, or modify columns in an existing table

    A) ALTER TABLE table_name        # To add a column in the table
       ADD column_name datatype 

    B) ALTER TABLE table_name        # Deleting a column. Some dtabses do not allow deleting a column
       DROP COLUMN column_name
    C) ALTER TABLE table_name        # To change the datatype of a column
       MODIFY column_name datatype
    D) ALTER TABLE Persons          # This will add a new column DateOfBirth in the Persons table
       ADD DateOfBirth date

4)   AUTO INCREMENT function: Auto-increment allows a unique number to be generated when a new record is inserted into a table.
         Very often we would like the value of the primary key field to be created automatically every time a new record is inserted.
         We would like to create an auto-increment field in a table.

      CREATE TABLE Persons                # The following SQL statement defines the "P_Id" column to be an auto-increment primary
      (                                   # key field in the "Persons" table
      P_Id int NOT NULL AUTO_INCREMENT,
      LastName varchar(255) NOT NULL,
      FirstName varchar(255),
      Address varchar(255),
      City varchar(255),
      PRIMARY KEY (P_Id)
      )




   When a SQL table is created, constraints are used to limit the type of data that can go into a table. Constraints can be specified
   when a table is created (with the CREATE TABLE statement) or after the table is created (with the ALTER TABLE statement).
   We will focus on the following constraints after the table is created:
     --NOT NULL
     --UNIQUE
     --PRIMARY KEY
     --FOREIGN KEY
     --CHECK
     --DEFAULT



 2) SQL NOT NULL constraint: This constraint enforces a column to not accept null values. The NOT NULL constraint enforces a field to
        always contain a value. This means that you cannot insert a new record, or update a record w/o adding a value to this field.

    A)  CREATE TABLE Persons
        (                                   # SQL enforces the "P_Id" column and the "LastName" column to not accept NULL values
        P_Id int NOT NULL,
        LastName varchar(255) NOT NULL,
        FirstName varchar(255),
        Address varchar(255),
        City varchar(255)
        )

 3) SQL UNIQUE constraint: The UNIQUE constraint uniquely identifies each record in a database table. The UNIQUE and PRIMARY KEY
       constraints both provide a guarantee for uniqueness for a column or set of columns. A PRIMARY KEY constraint automatically
       has a UNIQUE constraint defined on it. Note that you can have many UNIQUE constraints per table, but only one PRIMARY
       KEY constraint per table.

    A)  CREATE TABLE Persons
        (                            # SQL creates a UNIQUE constraint on the "P_Id" column when the "Persons" table is created
        P_Id int NOT NULL,
        LastName varchar(255) NOT NULL,
        FirstName varchar(255),
        Address varchar(255),
        City varchar(255),
        UNIQUE (P_Id)
        )

   B)   CREATE TABLE Persons
        (                                    #To allow naming of a UNIQUE constraint, and for defining a UNIQUE constraint on multiple
        P_Id int NOT NULL                      #  columns, use this SQL syntax
        LastName varchar(255) NOT NULL,      
        FirstName varchar(255),
        Address varchar(255),
        City varchar(255),
        CONSTRAINT uc_PersonID UNIQUE (P_Id,LastName)
        )

    The ALTER statement is always used with "ADD", "DROP" and "MODIFY" commands according to the situation.

   C)   ALTER TABLE Persons        # We can create a UNIQUE constraint on the "P_Id" column when the table is already created
        ADD UNIQUE (P_Id)          # using ALTER TABLE command 

   D)   ALTER TABLE Persons                                    # To allow naming of a UNIQUE constraint, and for defining a UNIQUE 
        ADD CONSTRAINT uc_PersonID UNIQUE (P_Id,LastName)       # constraint on multiple columns, use this SQL syntax

   E)   ALTER TABLE Persons                # To drop a UNIQUE constraint, use this SQL
        DROP INDEX uc_PersonID


 4) PRIMARY KEY constraint: The PRIMARY KEY constraint uniquely identifies each record in a database table. Primary keys must contain
           unique values. A primary key column cannot contain NULL values. Each table should have a primary key, and each table can
           have only ONE primary key.

    A)  CREATE TABLE Persons            # This creates a PRIMARY KEY on the "P_Id" column when the "Persons" table is created:
        (
        P_Id int NOT NULL,
        LastName varchar(255) NOT NULL,
        FirstName varchar(255),
        Address varchar(255),
        City varchar(255),
        PRIMARY KEY (P_Id)
        )

    B)  CREATE TABLE Persons           # To allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on 
        (                              #  multiple columns, use this SQL syntax:
        P_Id int NOT NULL,
        LastName varchar(255) NOT NULL,
        FirstName varchar(255),             # Note: In the example above there is only ONE PRIMARY KEY (pk_PersonID). However, the         
        Address varchar(255),               # # value of the pk_PersonID is made up of two columns (P_Id and LastName).
        City varchar(255),  
        CONSTRAINT pk_PersonID PRIMARY KEY (P_Id,LastName)
        )

    C)  ALTER TABLE Persons         # Creating a PRIMARY KEY constraint on the "P_Id" column when the table is already created
        ADD PRIMARY KEY (P_Id)

    D)  ALTER TABLE Persons           # To allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint 
        ADD CONSTRAINT pk_PersonID PRIMARY KEY (P_Id,LastName)      # on multiple columns, use this sql syntax

    E)  ALTER TABLE Persons       #Drop the primary key constraint from a table
        DROP PRIMARY KEY

5)   FORIEGN KEY constraint: A FOREIGN KEY in one table points to a PRIMARY KEY in another table.

    A)  CREATE TABLE Orders       # Creating a FOREIGN KEY on the "P_Id" column when the "Orders" table is created:
        (
        O_Id int NOT NULL,
        OrderNo int NOT NULL,
        P_Id int,
        PRIMARY KEY (O_Id),
        FOREIGN KEY (P_Id) REFERENCES Persons(P_Id)
        )

    B)  CREATE TABLE Orders             # To allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY
        (                               # constraint on multiple columns, use this SQL syntax
        O_Id int NOT NULL,
        OrderNo int NOT NULL,
        P_Id int,
        PRIMARY KEY (O_Id),
        CONSTRAINT fk_PerOrders FOREIGN KEY (P_Id)
        REFERENCES Persons(P_Id)
        )

    C)  ALTER TABLE Orders                 # Create=ing a FOREIGN KEY constraint on the "P_Id" column when the "Orders" table is
        ADD FOREIGN KEY (P_Id)             # already created, use this SQL:
        REFERENCES Persons(P_Id)

    D)  ALTER TABLE Orders                # To allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY constraint
        ADD CONSTRAINT fk_PerOrders       # on multiple columns, use this SQL syntax
        FOREIGN KEY (P_Id)
        REFERENCES Persons(P_Id)

    E)  ALTER TABLE Orders                    # Drop a foreign key constraint
        DROP FOREIGN KEY fk_PerOrders


  6) CHECK constraint: The CHECK constraint is used to limit the value range that can be placed in a column. If you define a CHECK
       constraint on a single column it allows only certain values for this column. If you define a CHECK constraint on a table it
       can limit the values in certain columns based on values in other columns in the row.

    A) CREATE TABLE Persons         # creates a CHECK constraint on the "P_Id" column when the "Persons" table is created.The CHECK 
       (                            # constraint specifies that the column "P_Id" must only include integers greater than 0.
       P_Id int NOT NULL,
       LastName varchar(255) NOT NULL,
       FirstName varchar(255),
       Address varchar(255),
       City varchar(255),
       CHECK (P_Id>0)
       )

   B)  CREATE TABLE Persons                 # To allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple
       (                                    # columns, use this SQL syntax:
       P_Id int NOT NULL,
       LastName varchar(255) NOT NULL,
       FirstName varchar(255),
       Address varchar(255),
       City varchar(255),
       CONSTRAINT chk_Person CHECK (P_Id>0 AND City='Sandnes')
       ) 

    C) ALTER TABLE Persons        # To create a CHECK constraint on the "P_Id" column when the table is already created, use this SQL
       ADD CHECK (P_Id>0)

    D) ALTER TABLE Persons       # To allow naming of a CHECK constraint & for defining a CHECK constraint on multiple columns,use this
       ADD CONSTRAINT chk_Person CHECK (P_Id>0 AND City='Sandnes')

    E) ALTER TABLE Persons         # To drop a CHECK constraint, use the following SQL:
       DROP CONSTRAINT chk_Person


7) DEFAULT constraint: The DEFAULT constraint is used to insert a default value into a column. The default value will be added to all
      new records, if no other value is specified.

    A) CREATE TABLE Persons     # This SQL creates a DEFAULT constraint on the "City" column when the "Persons" table is created:
       (
       P_Id int NOT NULL,
       LastName varchar(255) NOT NULL,
       FirstName varchar(255),
       Address varchar(255),
       City varchar(255) DEFAULT 'Sandnes'
       )

    B) CREATE TABLE Orders     # The DEFAULT constraint can also be used to insert system values, by using functions like GETDATE():
       (
       O_Id int NOT NULL,
       OrderNo int NOT NULL,
       P_Id int,
       OrderDate date DEFAULT GETDATE()
       )

    C) ALTER TABLE Persons         #To create a DEFAULT constraint on the "City" column when the table is already created, use this
       ALTER City SET DEFAULT 'SANDNES'

    D) ALTER TABLE Persons        # To drop a DEFAULT constraint, use the following SQL:
       ALTER City DROP DEFAULT
















